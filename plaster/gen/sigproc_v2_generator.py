from munch import Munch
from plaster.gen.base_generator import BaseGenerator
from plaster.gen import task_templates
from plaster.tools.schema.schema import Schema as s
from plaster.tools.utils import utils
from plaster.tools.calibration.calibration import Calibration
from plumbum import local


class SigprocV2Generator(BaseGenerator):
    """
    Examine sigprocv2(s) and study their results.
    Note that this requires a calibration file produced by running the run
    generated by the sigproc_v2_calibration generator.
    """

    schema = s(s.is_kws_r(**BaseGenerator.sigproc_v2_schema.schema(),))

    def generate(self):
        runs = []

        if len(self.sigproc_source) != 1:
            raise ValueError(f"Sigproc_v2 can have only one sigproc_source")

        ims_import_task = task_templates.ims_import(
            self.sigproc_source[0], is_movie=False
        )

        sigproc_v2_task = task_templates.sigproc_v2_analyze(self.calibration_file)

        run = Munch(run_name=f"sigproc_v2", **ims_import_task, **sigproc_v2_task,)

        if self.force_run_name is not None:
            run.run_name = self.force_run_name

        self.report_section_run_object(run)
        template = "sigproc_v2_analyze_template.ipynb"
        self.report_section_from_template(template)

        runs += [run]

        n_runs = len(runs)
        self.report_preamble(
            utils.smart_wrap(
                f"""
                # Sigproc V2 Analyze
                ## {n_runs} run(s) processed.
            """
            )
        )

        return runs
